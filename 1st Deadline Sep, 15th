
Scenarios: 

1. Hiking
 1.1. Rent a ReachNow to drive to mountain rainier on weekends with friends
 1.2. On the way, fill the gas
 1.3. On the way, eat at restaurant for lunch
 1.4. Buy the ticket to get into the park
 1.5. Book a hotel or check in the hotel.
 
 things:
 traveler:
  data:SSN, name, gender, DOB, hungry, tired,destination
  behavior:drive, eat, sleep, fill fuel, buy ticket, play
 car:
  data: model, fuel gauge
  behavior:move, getfilled
 destination:
  data: name, location, ZIP
  behavior:charge
 gas station belong to destination:
  data: price
  behavior:
 restaurant belong to destination:
  data: menu, price
  behavior:
 park belong to destination:
  data: ticket price, ticket amount
  behavior:
 hotel belong to destination:
  data:room, price
  vehavior:
 pseudo:
 traveler YUXIN;
 car Mazda3;
 restaurant KFC;
 gas station shell;
 hotel W;
 park centrepark;
 YUXIN.drive(Mazda3):fuel gauge;
 while (Mazda3.fuel gauge == 0)
  YUXIN.destination = shell;
  YUXIN.fill fuel(mazda3, shell): charge;
  Mazda3.fuel gauge = 100;
 while (YUXIN.hungry == true)
  YUXIN.destination = KFC;
  Mazda3.move(KFC);
  YUXIN.eat(KFC, KFC.menu, price): charge;
  YUXIN.hungry = false;
 while (YUXIN.tired == true)
  YUXIN.destination = W;
  Mazda3.move = W;
  YUXIN.sleep(W, room, price): charge;
  YUXIN.tired = false;
 Mazda3.move(centrepark);
 YUXIN.buy ticket(centrepark, price): charge;
 if (centrepark.ticket amount > 0)
  YUXIN.play(centrepark);
  centerpark.ticket amount--;
 
2. Organise a career fair(Suppose you are the organiser)
 2.1 choose place and date for the career fair; 
 2.2 Send invitations to companies; make sure how many companies;
 2.3 send invitation to students; make sure how many students;
 2.4 on Career Fair Day, solve problems from companies and student;
 2.5 Finish the fair after all companies and students leave. 
 things:
  career fair:
   data: name, date, location, IsOpen
   behavior:invite, open, close, solve problems
  company:
   data: name, contact information, offered positions, IsCertained, problem
   behavior: contact organizer, arrive, leave
  student:
   data: name, contact information, target position, IsCertained, problem
   behavior:contact organizer, arrive, leave
  classroom:
   data: space, date, IsAvailable
   bagavior:reserve
  pseudo:
   career fair NEU;
   company FB;
   student YUXIN;
   class room 101;
   if (101.IsAvailable == true)
    101.reserve(space, date): IsAvailable;
   while (FB.IsCertained == false)
    NEU.invite(FB, 101, date):IsCertained, offered positions;
   NEU.invite(YUXIN, FB, 101, date):IsCertained, target position;
   while (FB.arrive && YUXIN.arrive)
    NEU.open; NEU.IsOpen = true;
   while (FB.problem != 0 || YUXIN.problem != 0)
    FB.contact organizer(NEU):problem;
    NEU.solve problems(FB, problem): IsSolved;
    YUXIN.contact organizer(NEU):problem;
    NEU.solve problems(YUXIN, problem): IsSolved;
   while (FB.leave && YUXIN.leave)
    NEU.close; NEU.IsOpen = false;
    
3. Order Pizza from Pizza Hut
 3.1 customers make orders by APP, confirm items, price;
 3.2 Pizza Hut confirms the orders;
 3.3 if the order is declined by either cusstomer or Pizza Hut, loop;
 3.4 if the order is confirmed, Pizza Hut makes the pizze and deliver it;
 3.5 customers receive pizzas;
 things:
  customer:
   data: contact info
   behavior: make order, decline order, track order
  order:
   data: customer, time, item, price, providerï¼Œ status
   behavior:
  provider:
   data: contact info, product
   behavior: confirm order, decline order
 psuedo:
  customer YUXIN;
  provider PH;
  order NO1;
  while (NO1.status == declined || NO1.status == null)
   YUXIN.make order(PH, time, item, price): status;
   if YUXIN.DoNotNeedPizza
    YUXIN.decline order; NO1.status = declined;
   if (PH.product == null)
    PH.decline order; NO1.status = declined;
   else PH.confirm order; NO1.status = confirmed;
 YUXIN.track order(PH):PH.contact info, time, item, price, provider, status;
 while (NO1.status == delivered)//YUXIN received the package and the trade is closed
  NO1.status = done;
   

4. Design a code sharing platform (eg: Github).
 4.1 assume just one project and several coders;
 4.2 corders can upload, download, edit 
5. Design a soft-drink/snacks vending machine.
 5.1 providers charge the machine;
 5.2 customers choose what they want(except sold out items);
 5.3 customers pay by cash or credit card;
 5.4 mechine provide soft-drink/snacks and the change;
 things:
  item:
   data: name, price, stock
   behavior:getCharged
  customer:
   data: order, payment
   behavior:choose, pay, fatch
 pseudo:
  item[] snack;
  customer YUXIN;
  loop
   if (snack[].stock == 0)
    snack.getCharged():snack[].stock;
  YUXIN.choose(snack, amount): stock;
  while (stock >= YUXIN.order)
   YUXIN.pay(snack): change;
   snack.stock = snack.stock - YUXIN.order;
  YUXIN.fatch(snack, change);
  
  
